{"version":3,"file":"static/js/529.eaa34f96.chunk.js","mappings":"mNA+BaA,IA5BOC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAkBE,IAAAA,GAAAC,EAAAA,EAAAA,GAAA,oJASjBH,EAAAA,GAAOI,MAAKC,IAAAA,GAAAF,EAAAA,EAAAA,GAAA,kMAaZH,EAAAA,EAAAA,IAAOM,EAAAA,GAAPN,CAAaO,IAAAA,GAAAJ,EAAAA,EAAAA,GAAA,+DAMZH,EAAAA,GAAOQ,OAAMC,IAAAA,GAAAN,EAAAA,EAAAA,GAAA,iCAgBtBO,GAZQV,EAAAA,GAAOW,EAACC,IAAAA,GAAAT,EAAAA,EAAAA,GAAA,wKAYGH,EAAAA,GAAOQ,OAAMK,IAAAA,GAAAV,EAAAA,EAAAA,GAAA,2S,oLCtCvCW,EAAgB,CACpBC,MAAO,GACPC,SAAU,IAGNC,EAAcC,EAAAA,KAAaC,MAAM,CACrCJ,MAAOG,EAAAA,KAAaH,MAAM,iBAAiBK,SAAS,YACpDJ,SAAUE,EAAAA,KAAaE,WAAWC,IAAI,EAAG,2BAG9BC,EAAY,WAAO,IAADC,EACvBC,GAAWC,EAAAA,EAAAA,MACjBC,GAA0BC,EAAAA,EAAAA,UAAS,CACjCC,cAAc,IACdC,GAAAC,EAAAA,EAAAA,GAAAJ,EAAA,GAFKK,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GAItBI,GAKIC,EAAAA,EAAAA,IAAQ,CACVC,UAAUC,EAAAA,EAAAA,GAAYnB,GACtBoB,cAAevB,EACfwB,KAAM,WAPNC,EAAYN,EAAZM,aACAC,EAAQP,EAARO,SACAC,EAAKR,EAALQ,MAAKC,EAAAT,EACLU,UAAaC,EAAMF,EAANE,OAAQC,EAAOH,EAAPG,QAwBvB,OACEC,EAAAA,EAAAA,MAAA,QACEC,aAAa,MACbC,SAAUT,GAbG,SAAAU,GACfzB,GACE0B,EAAAA,EAAAA,IAAM,CACJnC,MAAOkC,EAAKlC,MAAMoC,OAClBnC,SAAUiC,EAAKjC,SAASmC,UAG5BV,GACF,IAMIW,MAAO,CACLC,QAAS,GACTC,QAAS,OACTC,cAAe,SACfC,SAAU,QACVC,OAAQ,qBACRC,SAAA,EAEFZ,EAAAA,EAAAA,MAAA,SAAOa,QAAQ,QAAOD,SAAA,CAAC,SAErBE,EAAAA,EAAAA,KAAA,SAAAC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACEC,KAAK,QACDtB,EAAS,UAAQ,IACrB,eAAcI,EAAO7B,MAAQ,OAAS,eAG1C6C,EAAAA,EAAAA,KAAA,OAAKR,MAAO,CAAEW,OAAQ,GAAIC,MAAO,OAAQN,SACtCd,EAAO7B,QAAS6C,EAAAA,EAAAA,KAAA,QAAAF,UAAmB,QAAZnC,EAAAqB,EAAO7B,aAAK,IAAAQ,OAAA,EAAZA,EAAc0C,UAAW,eAGnDnB,EAAAA,EAAAA,MAAA,SAAOa,QAAQ,WAAWP,MAAO,CAAEc,SAAU,YAAaR,SAAA,CAAC,YAEzDE,EAAAA,EAAAA,KAAA,SAAAC,EAAAA,EAAAA,GAAA,CACEC,KAAM/B,EAAMH,aAAe,OAAS,YAChCY,EAAS,eAEfoB,EAAAA,EAAAA,KAAClD,EAAAA,GAAgB,CAACoD,KAAK,SAASK,QA/CN,WAC9BnC,GAAQ6B,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EACL9B,GAAK,IACRH,cAAeG,EAAMH,eAEzB,EA0CuE8B,SAC9D3B,EAAMH,cAAegC,EAAAA,EAAAA,KAACQ,EAAAA,IAAY,KAAMR,EAAAA,EAAAA,KAACS,EAAAA,IAAe,UAI7DT,EAAAA,EAAAA,KAAC7D,EAAAA,GAAM,CAAC+D,KAAK,SAASQ,UAAWzB,EAAQa,SAAC,YAKhD,EC3Fe,SAASa,IACtB,OACEzB,EAAAA,EAAAA,MAAA,OAAAY,SAAA,EACEE,EAAAA,EAAAA,KAAA,MAAAF,SAAI,YACJE,EAAAA,EAAAA,KAACtC,EAAS,MAGhB,C","sources":["components/AuthForms/AuthForms.styled.jsx","components/AuthForms/LoginForm.jsx","pages/LoginPage/LoginPage.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form as FormikForm, Field } from 'formik';\n\nexport const Form = styled(FormikForm)`\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  max-width: 320px;\n  align-items: center;\n  border: 1px solid #b7b7bf;\n`;\n\nexport const Label = styled.label`\n  display: block;\n  position: relative;\n  & span {\n    font-weight: 700;\n    display: block;\n    margin-bottom: 5px;\n  }\n  &:not(:last-child) {\n    margin-bottom: 10px;\n  }\n`;\n\nexport const Input = styled(Field)`\n  display: block;\n  padding: 5px;\n  width: 300px;\n`;\n\nexport const Button = styled.button`\n  padding: 5px 10px;\n`;\n\nexport const Error = styled.p`\n  font-size: 14px;\n  font-style: italic;\n  color: red;\n  position: absolute;\n  right: 30px;\n  top: 50%;\n  padding: 0;\n  margin: 0;\n  line-height: 1;\n`;\n\nexport const VisibilityButton = styled.button`\n  position: absolute;\n  right: 0;\n  top: 39%;\n  background-color: transparent;\n  border: none;\n  width: 30px;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  padding: 0;\n  & svg {\n    width: 16px;\n    height: 16px;\n    color: gray;\n  }\n`;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/operations';\nimport * as Yup from 'yup';\nimport { Button, VisibilityButton } from './AuthForms.styled';\nimport { useForm } from 'react-hook-form';\nimport { MdVisibility, MdVisibilityOff } from 'react-icons/md';\nimport { yupResolver } from '@hookform/resolvers/yup';\n\nconst initialValues = {\n  email: '',\n  password: '',\n};\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string().email('Invalid email').required('Required'),\n  password: Yup.string().required().min(7, 'Password is too short'),\n});\n\nexport const LoginForm = () => {\n  const dispatch = useDispatch();\n  const [state, setState] = useState({\n    showPassword: false,\n  });\n\n  const {\n    handleSubmit,\n    register,\n    reset,\n    formState: { errors, isValid },\n  } = useForm({\n    resolver: yupResolver(loginSchema),\n    defaultValues: initialValues,\n    mode: 'onBlur',\n  });\n\n  const handleClickShowPassword = () => {\n    setState({\n      ...state,\n      showPassword: !state.showPassword,\n    });\n  };\n\n  const onSubmit = data => {\n    dispatch(\n      logIn({\n        email: data.email.trim(),\n        password: data.password.trim(),\n      })\n    );\n    reset();\n  };\n\n  return (\n    <form\n      autoComplete=\"off\"\n      onSubmit={handleSubmit(onSubmit)}\n      style={{\n        padding: 20,\n        display: 'flex',\n        flexDirection: 'column',\n        maxWidth: '320px',\n        border: '1px solid #b7b7bf',\n      }}\n    >\n      <label htmlFor=\"email\">\n        Email\n        <input\n          type=\"text\"\n          {...register('email')}\n          aria-invalid={errors.email ? 'true' : 'false'}\n        />\n      </label>\n      <div style={{ height: 20, color: 'red' }}>\n        {errors.email && <span>{errors.email?.message || 'Error !'}</span>}\n      </div>\n\n      <label htmlFor=\"password\" style={{ position: 'relative' }}>\n        Password\n        <input\n          type={state.showPassword ? 'text' : 'password'}\n          {...register('password')}\n        />\n        <VisibilityButton type=\"button\" onClick={handleClickShowPassword}>\n          {state.showPassword ? <MdVisibility /> : <MdVisibilityOff />}\n        </VisibilityButton>\n      </label>\n\n      <Button type=\"submit\" disabled={!isValid}>\n        Login\n      </Button>\n    </form>\n  );\n};\n","import { LoginForm } from 'components/AuthForms/LoginForm';\n\nexport default function Login() {\n  return (\n    <div>\n      <h1>Log in</h1>\n      <LoginForm />\n    </div>\n  );\n}\n"],"names":["Button","styled","FormikForm","_templateObject","_taggedTemplateLiteral","label","_templateObject2","Field","_templateObject3","button","_templateObject4","VisibilityButton","p","_templateObject5","_templateObject6","initialValues","email","password","loginSchema","Yup","shape","required","min","LoginForm","_errors$email","dispatch","useDispatch","_useState","useState","showPassword","_useState2","_slicedToArray","state","setState","_useForm","useForm","resolver","yupResolver","defaultValues","mode","handleSubmit","register","reset","_useForm$formState","formState","errors","isValid","_jsxs","autoComplete","onSubmit","data","logIn","trim","style","padding","display","flexDirection","maxWidth","border","children","htmlFor","_jsx","_objectSpread","type","height","color","message","position","onClick","MdVisibility","MdVisibilityOff","disabled","Login"],"sourceRoot":""}